// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: opentelemetry/proto/collector/profiles/v1development/profiles_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ProfilesDictionary, ResourceProfiles } from "../../../profiles/v1development/profiles.ts";

export const protobufPackage = "opentelemetry.proto.collector.profiles.v1development";

export interface ExportProfilesServiceRequest {
  /**
   * An array of ResourceProfiles.
   * For data coming from a single resource this array will typically contain one
   * element. Intermediary nodes (such as OpenTelemetry Collector) that receive
   * data from multiple origins typically batch the data before forwarding further and
   * in that case this array will contain multiple elements.
   */
  resourceProfiles: ResourceProfiles[];
  /** The reference table containing all data shared by profiles across the message being sent. */
  dictionary?: ProfilesDictionary | undefined;
}

export interface ExportProfilesServiceResponse {
  /**
   * The details of a partially successful export request.
   *
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_<signal>` with the number of items it rejected.
   *
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_<signal>` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   *
   * A `partial_success` message with an empty value (rejected_<signal> = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   */
  partialSuccess?: ExportProfilesPartialSuccess | undefined;
}

export interface ExportProfilesPartialSuccess {
  /**
   * The number of rejected profiles.
   *
   * A `rejected_<signal>` field holding a `0` value indicates that the
   * request was fully accepted.
   */
  rejectedProfiles: bigint;
  /**
   * A developer-facing human-readable message in English. It should be used
   * either to explain why the server rejected parts of the data during a partial
   * success or to convey warnings/suggestions during a full success. The message
   * should offer guidance on how users can address such issues.
   *
   * error_message is an optional field. An error_message with an empty value
   * is equivalent to it not being set.
   */
  errorMessage: string;
}

function createBaseExportProfilesServiceRequest(): ExportProfilesServiceRequest {
  return { resourceProfiles: [], dictionary: undefined };
}

export const ExportProfilesServiceRequest: MessageFns<ExportProfilesServiceRequest> = {
  encode(message: ExportProfilesServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceProfiles) {
      ResourceProfiles.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.dictionary !== undefined) {
      ProfilesDictionary.encode(message.dictionary, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportProfilesServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportProfilesServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resourceProfiles.push(ResourceProfiles.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dictionary = ProfilesDictionary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportProfilesServiceRequest {
    return {
      resourceProfiles: globalThis.Array.isArray(object?.resourceProfiles)
        ? object.resourceProfiles.map((e: any) => ResourceProfiles.fromJSON(e))
        : [],
      dictionary: isSet(object.dictionary) ? ProfilesDictionary.fromJSON(object.dictionary) : undefined,
    };
  },

  toJSON(message: ExportProfilesServiceRequest): unknown {
    const obj: any = {};
    if (message.resourceProfiles?.length) {
      obj.resourceProfiles = message.resourceProfiles.map((e) => ResourceProfiles.toJSON(e));
    }
    if (message.dictionary !== undefined) {
      obj.dictionary = ProfilesDictionary.toJSON(message.dictionary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportProfilesServiceRequest>, I>>(base?: I): ExportProfilesServiceRequest {
    return ExportProfilesServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportProfilesServiceRequest>, I>>(object: I): ExportProfilesServiceRequest {
    const message = createBaseExportProfilesServiceRequest();
    message.resourceProfiles = object.resourceProfiles?.map((e) => ResourceProfiles.fromPartial(e)) || [];
    message.dictionary = (object.dictionary !== undefined && object.dictionary !== null)
      ? ProfilesDictionary.fromPartial(object.dictionary)
      : undefined;
    return message;
  },
};

function createBaseExportProfilesServiceResponse(): ExportProfilesServiceResponse {
  return { partialSuccess: undefined };
}

export const ExportProfilesServiceResponse: MessageFns<ExportProfilesServiceResponse> = {
  encode(message: ExportProfilesServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialSuccess !== undefined) {
      ExportProfilesPartialSuccess.encode(message.partialSuccess, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportProfilesServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportProfilesServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partialSuccess = ExportProfilesPartialSuccess.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportProfilesServiceResponse {
    return {
      partialSuccess: isSet(object.partialSuccess)
        ? ExportProfilesPartialSuccess.fromJSON(object.partialSuccess)
        : undefined,
    };
  },

  toJSON(message: ExportProfilesServiceResponse): unknown {
    const obj: any = {};
    if (message.partialSuccess !== undefined) {
      obj.partialSuccess = ExportProfilesPartialSuccess.toJSON(message.partialSuccess);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportProfilesServiceResponse>, I>>(base?: I): ExportProfilesServiceResponse {
    return ExportProfilesServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportProfilesServiceResponse>, I>>(
    object: I,
  ): ExportProfilesServiceResponse {
    const message = createBaseExportProfilesServiceResponse();
    message.partialSuccess = (object.partialSuccess !== undefined && object.partialSuccess !== null)
      ? ExportProfilesPartialSuccess.fromPartial(object.partialSuccess)
      : undefined;
    return message;
  },
};

function createBaseExportProfilesPartialSuccess(): ExportProfilesPartialSuccess {
  return { rejectedProfiles: 0n, errorMessage: "" };
}

export const ExportProfilesPartialSuccess: MessageFns<ExportProfilesPartialSuccess> = {
  encode(message: ExportProfilesPartialSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rejectedProfiles !== 0n) {
      if (BigInt.asIntN(64, message.rejectedProfiles) !== message.rejectedProfiles) {
        throw new globalThis.Error("value provided for field message.rejectedProfiles of type int64 too large");
      }
      writer.uint32(8).int64(message.rejectedProfiles);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportProfilesPartialSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportProfilesPartialSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rejectedProfiles = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportProfilesPartialSuccess {
    return {
      rejectedProfiles: isSet(object.rejectedProfiles) ? BigInt(object.rejectedProfiles) : 0n,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: ExportProfilesPartialSuccess): unknown {
    const obj: any = {};
    if (message.rejectedProfiles !== 0n) {
      obj.rejectedProfiles = message.rejectedProfiles.toString();
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportProfilesPartialSuccess>, I>>(base?: I): ExportProfilesPartialSuccess {
    return ExportProfilesPartialSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportProfilesPartialSuccess>, I>>(object: I): ExportProfilesPartialSuccess {
    const message = createBaseExportProfilesPartialSuccess();
    message.rejectedProfiles = object.rejectedProfiles ?? 0n;
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

/**
 * Service that can be used to push profiles between one Application instrumented with
 * OpenTelemetry and a collector, or between a collector and a central collector.
 */
export interface ProfilesService {
  Export(request: ExportProfilesServiceRequest): Promise<ExportProfilesServiceResponse>;
}

export const ProfilesServiceServiceName = "opentelemetry.proto.collector.profiles.v1development.ProfilesService";
export class ProfilesServiceClientImpl implements ProfilesService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProfilesServiceServiceName;
    this.rpc = rpc;
    this.Export = this.Export.bind(this);
  }
  Export(request: ExportProfilesServiceRequest): Promise<ExportProfilesServiceResponse> {
    const data = ExportProfilesServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Export", data);
    return promise.then((data) => ExportProfilesServiceResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
